[
  {
    "objectID": "members.html",
    "href": "members.html",
    "title": "Members",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2\n\n\n\n# Load the ggplot2 package\nlibrary(ggplot2)\nlibrary(extrafont)\n\nRegistering fonts with R\n\nlibrary(showtext)\n\nLoading required package: sysfonts\n\n\nLoading required package: showtextdb\n\n\n\nAttaching package: 'showtextdb'\n\n\nThe following object is masked from 'package:extrafont':\n\n    font_install\n\nshowtext.auto()\n\n'showtext.auto()' is now renamed to 'showtext_auto()'\nThe old version still works, but consider using the new function in future code\n\n#extrafont::choose_font(\"Arial\")\n\n# Create some example data\nx <- 1:10\ny <- x^2\n\n# Create the plot\nggplot(data = data.frame(x, y), aes(x = x, y = y)) +\n  geom_line() + theme(text = element_text(family = \"Arial\", size = 20))\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\n'Arial' not found, will use 'sans' instead\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Arial' not found, will use 'sans' instead\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Arial' not found, will use 'sans' instead\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Arial' not found, will use 'sans' instead\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily 'Arial' not found, will use 'sans' instead\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Arial' not found, will use 'sans' instead\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family 'Arial' not found, will use 'sans' instead\n\n\n\n\n\n\n\n\n\nWho are we?\ntrgrtgrtg\n\nWhen the moon hits your eye\n\n\n\n\n\n\nA Lovely Image\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnother Lovely Image\n\n\n\n\n\n\n\nThe Last Lovely Image\n\n\n\n\n\n\n damoncroberts\n DamonCharlesRoberts\n Wednesdays from 12:15 - 2:15 pm Mountain\n Ketchum Arts & Sciences, Office 382, Boulder, CO 80309\nSome text"
  },
  {
    "objectID": "learn/rstudio/rstudio/rstudio/InstallRStudio.html",
    "href": "learn/rstudio/rstudio/rstudio/InstallRStudio.html",
    "title": "Install R and Rstudio: why R rocks 💻 🔥",
    "section": "",
    "text": "R provides a versatile and powerful toolset for users of all skill levels, making it the go-to choice if you’re looking for a cutting-edge solution for your data analysis needs. R has everything you need to advance your data analysis, regardless of your experience level or where you are in your career. We assure you won’t be disappointed, so why not join the millions of happy users who have already switched to R?\nR is a free, open-source programming language that is widely used in data analysis and statistical computing. RStudio is an integrated development environment (IDE) that makes it easier to write and run R code. Installing R and RStudio is straightforward and can be done in a few simple steps:\n\nWhy R?\nDue to its many benefits in statistical computing and data analysis, R is a strong and flexible programming language that has gained popularity recently. Here are some of the main benefits of using R:\n\nOpen source software: R is open source, so users can access and alter the source code to tailor the program to their needs.\n\n\n\n\n\n\n\n\n\n\n\n\n\nPackages: Users can use R’s extensive package library to add functionality for specialized tasks like tables, visualization, and data manipulation. Right now, there are more than 18,000 packages available.\n\n\n\n\n\n\n\nEasy to use: R has an intuitive user interface that makes it simple for new users to learn and offers advanced features for seasoned users.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStep 1: Install R\nFirst, you need to install R on your computer. You can download the latest version of R from the Comprehensive R Archive Network (CRAN) website. Follow these steps:\n\nGo to the CRAN website and click on the “Download R for (Windows/MacOS/Linux)” link.\nChoose your operating system from the list and click on the corresponding link to download the installation file.\nOnce the file is downloaded, run the installation program and follow the instructions.\n\n\n\nStep 2: Install RStudio\nThe latest version of RStudio can be downloaded from the RStudio website. After you have installed R, you can install RStudio, an optional but highly recommended IDE for R. The following actions should be taken.\n\nVisit the RStudio website and select “RStudio Desktop” from the list of available products.\nFrom the list, select your operating system, and then click the link to download the installation file.\nRun the installation program after the file has been downloaded, then adhere to the prompts.\n\n\n\nStep 3: Launch RStudio\nOnce you have installed R and RStudio, you can launch RStudio by double-clicking on its icon . When you first launch RStudio, you will be prompted to select a version of R to use. If you have installed only one version of R, it should be automatically selected. Otherwise, you can choose the version of R that you want to use.\n\n\n\n\n\n\nReady\n\n\n\nYou’ve now successfully installed R and RStudio on your computer. Now that R and RStudio are installed, you can begin writing and running R code."
  },
  {
    "objectID": "learn/rstudio/rstudio/rstudio/index.html",
    "href": "learn/rstudio/rstudio/rstudio/index.html",
    "title": "How important is GitHub Actions to RStudio/Posit?",
    "section": "",
    "text": "This post is a complementary material for my talk at rstudio::conf 2022 (which is happening TODAY!!!)!\nI’m writing this really quick, from the hotel room, for anyone interested to see the code used to create the plot that it is on my talk:"
  },
  {
    "objectID": "learn/rstudio/rstudio/rstudio/thread.html",
    "href": "learn/rstudio/rstudio/rstudio/thread.html",
    "title": "Enable Multithread with data.table in Mac/Intel chips",
    "section": "",
    "text": "This document shows you how we can enable the use of multiple cores on Macs with Intel/Apple silicon chips (M1 and M2).\nIf we load data.table library in  studio, this message will appear in your console:\nAs you can see, OpenMP support is needed to use multiple cores in Macs. Therefore, we must install those packages through the terminal and set the required paths to run OpenMP."
  },
  {
    "objectID": "learn/rstudio/rstudio/rstudio/thread.html#install-llvm",
    "href": "learn/rstudio/rstudio/rstudio/thread.html#install-llvm",
    "title": "Enable Multithread with data.table in Mac/Intel chips",
    "section": "Install llvm",
    "text": "Install llvm\nWe need to install the llvm package to access the clang compiler, which helps us to set multithreading.\n\nbrew install llvm\n\n\n\n\n \n\n\n\n\n\n\n\n\nOnce the installation is finished, we should see this screen in the terminal."
  },
  {
    "objectID": "learn/rstudio/rstudio/rstudio/thread.html#install-libopenmp",
    "href": "learn/rstudio/rstudio/rstudio/thread.html#install-libopenmp",
    "title": "Enable Multithread with data.table in Mac/Intel chips",
    "section": "Install libopenmp",
    "text": "Install libopenmp\n\nbrew install libopenmp\n\nThis is the screen that you should see once the installation is done."
  },
  {
    "objectID": "learn/rstudio/rstudio/rstudio/thread.html#install-libopenmpt",
    "href": "learn/rstudio/rstudio/rstudio/thread.html#install-libopenmpt",
    "title": "Enable Multithread with data.table in Mac/Intel chips",
    "section": "Install libopenmpt",
    "text": "Install libopenmpt\n\nbrew install libopenmpt\n\nThis is the screen that you should see once the installation is done.\n :::"
  },
  {
    "objectID": "learn/rstudio/rstudio/rstudio/thread.html#install-gcc",
    "href": "learn/rstudio/rstudio/rstudio/thread.html#install-gcc",
    "title": "Enable Multithread with data.table in Mac/Intel chips",
    "section": "Install gcc",
    "text": "Install gcc\n\nbrew install gcc\n\nThis is the screen that you should see once the installation is done."
  },
  {
    "objectID": "learn/rstudio/rstudio/rstudio/thread.html#install-cask-openmtp",
    "href": "learn/rstudio/rstudio/rstudio/thread.html#install-cask-openmtp",
    "title": "Enable Multithread with data.table in Mac/Intel chips",
    "section": "Install –cask openmtp",
    "text": "Install –cask openmtp\n\nbrew install --cask openmtp\n\nThis is the screen that you should see once the installation is done.\n}"
  },
  {
    "objectID": "learn/rstudio/rstudio/rstudio/thread.html#apple-silicon",
    "href": "learn/rstudio/rstudio/rstudio/thread.html#apple-silicon",
    "title": "Enable Multithread with data.table in Mac/Intel chips",
    "section": "Apple Silicon",
    "text": "Apple Silicon\n\nHOMEBREW_LOC=/opt/homebrew \nLLVM_LOC=$(HOMEBREW_LOC)/opt/llvm \nCC=$(LLVM_LOC)/bin/clang -fopenmp \nCXX=$(LLVM_LOC)/bin/clang++ -fopenmp \nCFLAGS=-g -O3 -Wall -pedantic -std=gnu99 -mtune=native -pipe \nCXXFLAGS=-g -O3 -Wall -pedantic -std=c++11 -mtune=native -pipe \nLDFLAGS=-L$(HOMEBREW_LOC)/opt/gettext/lib -L$(LLVM_LOC)/lib -Wl,-rpath,$(LLVM_LOC)/lib \nCPPFLAGS=-I$(HOMEBREW_LOC)/opt/gettext/include -I$(LLVM_LOC)/include"
  },
  {
    "objectID": "learn/rstudio/rstudio/rstudio/thread.html#intel",
    "href": "learn/rstudio/rstudio/rstudio/thread.html#intel",
    "title": "Enable Multithread with data.table in Mac/Intel chips",
    "section": "Intel",
    "text": "Intel\n\nHOMEBREW_LOC=/usr/local\nLLVM_LOC=$(HOMEBREW_LOC)/opt/llvm\nCC=$(LLVM_LOC)/bin/clang -fopenmp \nCXX=$(LLVM_LOC)/bin/clang++ -fopenmp \nCFLAGS=-g -O3 -Wall -pedantic -std=gnu99 -mtune=native -pipe \nCXXFLAGS=-g -O3 -Wall -pedantic -std=c++11 -mtune=native -pipe \nLDFLAGS=-L$(HOMEBREW_LOC)/opt/gettext/lib -L$(LLVM_LOC)/lib -Wl,-rpath,$(LLVM_LOC)/lib \nCPPFLAGS=-I$(HOMEBREW_LOC)/opt/gettext/include -I$(LLVM_LOC)/include\n\n\n\n\n\nOnce you put the paths, save the text file and close it. The difference between Apple Silicon and Intel is just the path; everything else remains similar. For Apple Silicon, the path is /opt/homebrew and for Intel is /usr/local."
  },
  {
    "objectID": "learn/index.html",
    "href": "learn/index.html",
    "title": "Posts",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nHow important is GitHub Actions to RStudio/Posit?\n\n\nThis is a example of subtitle. Keep going and youll be fine. Code for a plot in my talk at rstudio::conf 2022!\n\n\n\nJul 28, 2022\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "learn/rstudio.html",
    "href": "learn/rstudio.html",
    "title": "",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\n\nUnlock the power of data analysis and statistical computing with R and RStudio! Whether you are a student of public policy or a seasoned professional.\n\n\n\n\nR\n\n\nRStudio\n\n\nAccesibility\n\n\nInstall\n\n\n \n\n\n\n\nMar 2, 2023\n\n\nJorge Roa\n\n\n2 min\n\n\n\n\n\n\n  \n\n\n\n\n\nThis is a example of subtitle. Keep going and youll be fine. Code for a plot in my talk at rstudio::conf 2022!\n\n\n\n\nGitHub\n\n\nGitHub Actions\n\n\nAutomations\n\n\nRStudio\n\n\n \n\n\n\n\nJul 28, 2022\n\n\nBeatriz Milz\n\n\n0 min\n\n\n\n\n\n\n  \n\n\n\n\n\nMultithreading offers faster and more efficient data processing, allowing for quicker analysis of complex datasets.\n\n\n\n\nGitHub\n\n\nGitHub Actions\n\n\nAutomations\n\n\nRStudio\n\n\nPosit\n\n\n \n\n\n\n\nJul 28, 2022\n\n\nJorge Roa, Fernando Alarid-Escudero\n\n\n3 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "events/02_wrangle/index.html",
    "href": "events/02_wrangle/index.html",
    "title": "Meet Up II: Wrangle dataframes",
    "section": "",
    "text": "📍 Hertie School. Seminar Room 2.61\n🗓 November 18, 2022\n\nObjective: We will go over the fundamentals of data wrangling in R. We will create our first repo with GitHub and understand why using Git is important in the Data Science world. Also, we will move on to exploring methods for cleaning, transforming, and manipulating data using the dplyr package. We’ll discuss data operations like filtering, sorting, joining, and summing up. Participants will leave the session with a firm grasp on the fundamentals of data manipulation in R, which will serve as a solid foundation for further exploration and experimentation with this potent language."
  },
  {
    "objectID": "events/03_wrangle_part2/index.html",
    "href": "events/03_wrangle_part2/index.html",
    "title": "Meet Up III: Wrangle dataframes",
    "section": "",
    "text": "📍 Hertie School. Seminar Room 2.61\n🗓 14:00 - 16:00 hrs, November 24, 2022\n\nObjective: We will go over the fundamentals of data wrangling in R. We will continue exploring methods for cleaning, transforming, and manipulating data using the dplyr package. We’ll discuss data operations like filtering, sorting, joining, and summing up. Participants will leave the session with a firm grasp on the fundamentals of data manipulation in R, which will serve as a solid foundation for further exploration and experimentation with this potent language."
  },
  {
    "objectID": "events/05_social_media_analysis/index.html",
    "href": "events/05_social_media_analysis/index.html",
    "title": "Social Media Scraping",
    "section": "",
    "text": "📍 Hertie School. Seminar Room 1.61\n🗓 14:00 hrs, March 17, 2023\n\nObjective: An introduction to social media analysis! We’ll be scraping tweets from Twitter using the rtweet package, cleaning data, and using it to produce a variety of insightful visualizations. This session will provide you with some of the skills necessary to do social media research on your own, whether for a class, internship, or personal interest."
  },
  {
    "objectID": "events/01_kickoff_event/index.html",
    "href": "events/01_kickoff_event/index.html",
    "title": "Kick-Off Event: Hertie Coding Club",
    "section": "",
    "text": "📍 Hertie School. Forum\n🗓 November 04, 2022\n\nObjective: Our club’s goal is to assist you in developing the coding and programming skills you’ll need for your upcoming job, project, or academic inquiry. We are so excited to invite you to our presentation! We’ll discuss our club’s goals and the dates of our upcoming meetings during this session. You’ll also learn about our use of GitHub and Slack, two tools that are necessary for any coding project. We are so excited to meet you at our presentation and start this exciting new journey. Everyone can learn to code, keep that in mind!"
  },
  {
    "objectID": "events/04_environment/index.html",
    "href": "events/04_environment/index.html",
    "title": "Setting up your environment in Python",
    "section": "",
    "text": "📍 Hertie School. Seminar Room 2.34\n🗓 13:00 hrs, February 24, 2023\n\nObjective: The main learning outcome is for you to know how to set up reproducible and shareable environments for Python projects, understand how to effectively switch between environments when using an IDE and how to work more efficiently with IDEs, including how to use jupyter code cells within a .py script (a personal favourite of mine). The workshop will focus on Pipenv (the environment and packaging tool officially recommended by the Python developer community) and VSCode (a very customizable and efficient IDE). Nevertheless, the ideas and workflows covered here also apply for other tools (like Anaconda or venv, Sypder or Pycharm)."
  },
  {
    "objectID": "learn.html",
    "href": "learn.html",
    "title": "Learn",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  }
]